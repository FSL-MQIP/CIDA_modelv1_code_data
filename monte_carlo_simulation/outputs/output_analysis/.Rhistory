fitted_param$temp[110] <- "10"
fitted_param$aic[110] <- AIC(b166_gompertz_nls_lm_10)
fitted_param$bic[110] <- BIC(b166_gompertz_nls_lm_10)
fitted_param$fit[110] <- "yes"
fitted_param$method[110] <- "nls_lm"
fitted_param$rep[110] <- "1"
##------------------------S12-0180 Model Fitting, 10C---------------------------
b180_10_1_index <- which(param_estimates$isolate == "S12-0180" & param_estimates$temp == "10" & param_estimates$rep == "1")
#baranyi
b180_baranyi_nls_lm_10 <- nlsLM(log_average_wrangled_conc ~
baranyi(day, log10n0, log10nmax, mumax, lag),
data = b180_10,
start=list(
log10n0 = param_estimates$n0[b180_10_1_index],
log10nmax = param_estimates$nmax[b180_10_1_index],
mumax = (param_estimates$mumax[b180_10_1_index]*2.303),
lag = param_estimates$lag[b180_10_1_index]),
lower = c(0, 0, 0, 0))
fitted_param$isolate[111] <-"S12-0180"
fitted_param$pop[111] <-"apc"
fitted_param$model_type[111] <-"baranyi"
fitted_param$n0[111] <- summary(b180_baranyi_nls_lm_10)$coefficient[1]
fitted_param$lag[111] <- summary(b180_baranyi_nls_lm_10)$coefficient[4]
fitted_param$mumax[111] <- summary(b180_baranyi_nls_lm_10)$coefficient[3]
fitted_param$nmax[111] <- summary(b180_baranyi_nls_lm_10)$coefficient[2]
fitted_param$temp[111] <- "10"
fitted_param$aic[111] <- AIC(b180_baranyi_nls_lm_10)
fitted_param$bic[111] <- BIC(b180_baranyi_nls_lm_10)
fitted_param$fit[111] <- "yes_maxiter_error"
fitted_param$method[111] <- "nls_lm"
fitted_param$rep[111] <- "1"
#baranyi no lag
b180_baranyi_no_lag_nls_lm_10 <- nlsLM(log_average_wrangled_conc ~
baranyi_no_lag(day, log10n0, log10nmax, mumax),
data = b180_10,
start=list(
log10n0 = param_estimates$n0[b180_10_1_index],
log10nmax = param_estimates$nmax[b180_10_1_index],
mumax = param_estimates$mumax[b180_10_1_index]),
lower = c(0, 0, 0))
fitted_param$isolate[112] <-"S12-0180"
fitted_param$pop[112] <-"apc"
fitted_param$model_type[112] <-"baranyi_no_lag"
fitted_param$n0[112] <- summary(b180_baranyi_no_lag_nls_lm_10)$coefficient[1]
fitted_param$mumax[112] <- summary(b180_baranyi_no_lag_nls_lm_10)$coefficient[3]
fitted_param$nmax[112] <- summary(b180_baranyi_no_lag_nls_lm_10)$coefficient[2]
fitted_param$temp[112] <- "10"
fitted_param$aic[112] <- AIC(b180_baranyi_no_lag_nls_lm_10)
fitted_param$bic[112] <- BIC(b180_baranyi_no_lag_nls_lm_10)
fitted_param$fit[112] <- "no"
fitted_param$method[112] <- "nls_lm"
fitted_param$rep[112] <- "1"
#buchanan
b180_buchanan_nls_lm_10 <- nlsLM(log_average_wrangled_conc ~
buchanan(day, log10n0, log10nmax, mumax, lag),
data = b180_10,
start=list(
log10n0 = param_estimates$n0[b180_10_1_index],
log10nmax = param_estimates$nmax[b180_10_1_index],
mumax = (param_estimates$mumax[b180_10_1_index]*2.303),
lag = param_estimates$lag[b180_10_1_index]),
lower = c(0, 0, 0, 0))
fitted_param$isolate[113] <-"S12-0180"
fitted_param$pop[113] <-"apc"
fitted_param$model_type[113] <-"buchanan"
fitted_param$n0[113] <- summary(b180_buchanan_nls_lm_10)$coefficient[1]
fitted_param$lag[113] <- summary(b180_buchanan_nls_lm_10)$coefficient[4]
fitted_param$mumax[113] <- summary(b180_buchanan_nls_lm_10)$coefficient[3]
fitted_param$nmax[113] <- summary(b180_buchanan_nls_lm_10)$coefficient[2]
fitted_param$temp[113] <- "10"
fitted_param$aic[113] <- AIC(b180_buchanan_nls_lm_10)
fitted_param$bic[113] <- BIC(b180_buchanan_nls_lm_10)
fitted_param$fit[113] <- "yes"
fitted_param$method[113] <- "nls_lm"
fitted_param$rep[113] <- "1"
#buchanan no lag
b180_buchanan_no_lag_nls_lm_10 <- nlsLM(log_average_wrangled_conc ~
buchanan_no_lag(day, log10n0, log10nmax, mumax),
data = b180_10,
start=list(
log10n0 = param_estimates$n0[b180_10_1_index],
log10nmax = param_estimates$nmax[b180_10_1_index],
mumax = (param_estimates$mumax[b180_10_1_index]*2.303)),
lower = c(0, 0, 0))
fitted_param$isolate[114] <-"S12-0180"
fitted_param$pop[114] <-"apc"
fitted_param$model_type[114] <-"buchanan_no_lag"
fitted_param$n0[114] <- summary(b180_buchanan_no_lag_nls_lm_10)$coefficient[1]
fitted_param$mumax[114] <- summary(b180_buchanan_no_lag_nls_lm_10)$coefficient[3]
fitted_param$nmax[114] <- summary(b180_buchanan_no_lag_nls_lm_10)$coefficient[2]
fitted_param$temp[114] <- "10"
fitted_param$aic[114] <- AIC(b180_buchanan_no_lag_nls_lm_10)
fitted_param$bic[114] <- BIC(b180_buchanan_no_lag_nls_lm_10)
fitted_param$fit[114] <- "yes"
fitted_param$method[114] <- "nls_lm"
fitted_param$rep[114] <- "1"
#gompertz
b180_gompertz_nls_lm_10 <- nlsLM(log_average_wrangled_conc ~
gompertz(day, log10n0, log10nmax, mumax, lag),
data = b180_10,
start=list(
log10n0 = param_estimates$n0[b180_10_1_index],
log10nmax = param_estimates$nmax[b180_10_1_index],
mumax = (param_estimates$mumax[b180_10_1_index]*2.303),
lag = param_estimates$lag[b180_10_1_index]),
lower = c(0, 0, 0, 0))
fitted_param$isolate[115] <-"S12-0180"
fitted_param$pop[115] <-"apc"
fitted_param$model_type[115] <-"gompertz"
fitted_param$n0[115] <- summary(b180_gompertz_nls_lm_10)$coefficient[1]
fitted_param$lag[115] <- summary(b180_gompertz_nls_lm_10)$coefficient[4]
fitted_param$mumax[115] <- summary(b180_gompertz_nls_lm_10)$coefficient[3]
fitted_param$nmax[115] <- summary(b180_gompertz_nls_lm_10)$coefficient[2]
fitted_param$temp[115] <- "10"
fitted_param$aic[115] <- AIC(b180_gompertz_nls_lm_10)
fitted_param$bic[115] <- BIC(b180_gompertz_nls_lm_10)
fitted_param$fit[115] <- "yes"
fitted_param$method[115] <- "nls_lm"
fitted_param$rep[115] <- "1"
##------------------------S12-0184 Model Fitting, 10C---------------------------
b184_10_1_index <- which(param_estimates$isolate == "S12-0184" & param_estimates$temp == "10" & param_estimates$rep == "1")
#baranyi
b184_baranyi_nls_lm_10 <- nlsLM(log_average_wrangled_conc ~
baranyi(day, log10n0, log10nmax, mumax, lag),
data = b184_10,
start=list(
log10n0 = param_estimates$n0[b184_10_1_index],
log10nmax = param_estimates$nmax[b184_10_1_index],
mumax = (param_estimates$mumax[b184_10_1_index]*2.303),
lag = param_estimates$lag[b184_10_1_index]),
lower = c(0, 0, 0, 0))
fitted_param$isolate[116] <-"S12-0184"
fitted_param$pop[116] <-"apc"
fitted_param$model_type[116] <-"baranyi"
fitted_param$n0[116] <- summary(b184_baranyi_nls_lm_10)$coefficient[1]
fitted_param$lag[116] <- summary(b184_baranyi_nls_lm_10)$coefficient[4]
fitted_param$mumax[116] <- summary(b184_baranyi_nls_lm_10)$coefficient[3]
fitted_param$nmax[116] <- summary(b184_baranyi_nls_lm_10)$coefficient[2]
fitted_param$temp[116] <- "10"
fitted_param$aic[116] <- AIC(b184_baranyi_nls_lm_10)
fitted_param$bic[116] <- BIC(b184_baranyi_nls_lm_10)
fitted_param$fit[116] <- "no"
fitted_param$method[116] <- "nls_lm"
fitted_param$rep[116] <- "1"
#baranyi no lag
b184_baranyi_no_lag_nls_lm_10 <- nlsLM(log_average_wrangled_conc ~
baranyi_no_lag(day, log10n0, log10nmax, mumax),
data = b184_10,
start=list(
log10n0 = param_estimates$n0[b184_10_1_index],
log10nmax = param_estimates$nmax[b184_10_1_index],
mumax = (param_estimates$mumax[b184_10_1_index]*2.303)),
lower = c(0, 0, 0))
fitted_param$isolate[117] <-"S12-0184"
fitted_param$pop[117] <-"apc"
fitted_param$model_type[117] <-"baranyi_no_lag"
fitted_param$n0[117] <- summary(b184_baranyi_no_lag_nls_lm_10)$coefficient[1]
fitted_param$mumax[117] <- summary(b184_baranyi_no_lag_nls_lm_10)$coefficient[3]
fitted_param$nmax[117] <- summary(b184_baranyi_no_lag_nls_lm_10)$coefficient[2]
fitted_param$temp[117] <- "10"
fitted_param$aic[117] <- AIC(b184_baranyi_no_lag_nls_lm_10)
fitted_param$bic[117] <- BIC(b184_baranyi_no_lag_nls_lm_10)
fitted_param$fit[117] <- "yes"
fitted_param$method[117] <- "nls_lm"
fitted_param$rep[117] <- "1"
#buchanan
b184_buchanan_nls_lm_10 <- nlsLM(log_average_wrangled_conc ~
buchanan(day, log10n0, log10nmax, mumax, lag),
data = b184_10,
start=list(
log10n0 = param_estimates$n0[b184_10_1_index],
log10nmax = param_estimates$nmax[b184_10_1_index],
mumax = (param_estimates$mumax[b184_10_1_index]*2.303),
lag = param_estimates$lag[b184_10_1_index]),
lower = c(0, 0, 0, 0))
fitted_param$isolate[118] <-"S12-0184"
fitted_param$pop[118] <-"apc"
fitted_param$model_type[118] <-"buchanan"
fitted_param$n0[118] <- summary(b184_buchanan_nls_lm_10)$coefficient[1]
fitted_param$lag[118] <- summary(b184_buchanan_nls_lm_10)$coefficient[4]
fitted_param$mumax[118] <- summary(b184_buchanan_nls_lm_10)$coefficient[3]
fitted_param$nmax[118] <- summary(b184_buchanan_nls_lm_10)$coefficient[2]
fitted_param$temp[118] <- "10"
fitted_param$aic[118] <- AIC(b184_buchanan_nls_lm_10)
fitted_param$bic[118] <- BIC(b184_buchanan_nls_lm_10)
fitted_param$fit[118] <- "yes"
fitted_param$method[118] <- "nls_lm"
fitted_param$rep[118] <- "1"
#buchanan no lag
b184_buchanan_no_lag_nls_lm_10 <- nlsLM(log_average_wrangled_conc ~
buchanan_no_lag(day, log10n0, log10nmax, mumax),
data = b184_10,
start=list(
log10n0 = param_estimates$n0[b184_10_1_index],
log10nmax = param_estimates$nmax[b184_10_1_index],
mumax = (param_estimates$mumax[b184_10_1_index]*2.303)),
lower = c(0, 0, 0))
fitted_param$isolate[119] <-"S12-0184"
fitted_param$pop[119] <-"apc"
fitted_param$model_type[119] <-"buchanan_no_lag"
fitted_param$n0[119] <- summary(b184_buchanan_no_lag_nls_lm_10)$coefficient[1]
fitted_param$mumax[119] <- summary(b184_buchanan_no_lag_nls_lm_10)$coefficient[3]
fitted_param$nmax[119] <- summary(b184_buchanan_no_lag_nls_lm_10)$coefficient[2]
fitted_param$temp[119] <- "10"
fitted_param$aic[119] <- AIC(b184_buchanan_no_lag_nls_lm_10)
fitted_param$bic[119] <- BIC(b184_buchanan_no_lag_nls_lm_10)
fitted_param$fit[119] <- "yes"
fitted_param$method[119] <- "nls_lm"
fitted_param$rep[119] <- "1"
#gompertz
b184_gompertz_nls_lm_10 <- nlsLM(log_average_wrangled_conc ~
gompertz(day, log10n0, log10nmax, mumax, lag),
data = b184_10,
start=list(
log10n0 = param_estimates$n0[b184_10_1_index],
log10nmax = param_estimates$nmax[b184_10_1_index],
mumax = (param_estimates$mumax[b184_10_1_index]*2.303),
lag = param_estimates$lag[b184_10_1_index]),
lower = c(0, 0, 0, 0))
fitted_param$isolate[120] <-"S12-0184"
fitted_param$pop[120] <-"apc"
fitted_param$model_type[120] <-"gompertz"
fitted_param$n0[120] <- summary(b184_gompertz_nls_lm_10)$coefficient[1]
fitted_param$lag[120] <- summary(b184_gompertz_nls_lm_10)$coefficient[4]
fitted_param$mumax[120] <- summary(b184_gompertz_nls_lm_10)$coefficient[3]
fitted_param$nmax[120] <- summary(b184_gompertz_nls_lm_10)$coefficient[2]
fitted_param$temp[120] <- "10"
fitted_param$aic[120] <- AIC(b184_gompertz_nls_lm_10)
fitted_param$bic[120] <- BIC(b184_gompertz_nls_lm_10)
fitted_param$fit[120] <- "yes"
fitted_param$method[120] <- "nls_lm"
fitted_param$rep[120] <- "1"
#Selecting the Buchanan-no-lag model, since all data could be fit to this model
#and because we are assuming there is no lag in this data
final_model <- fitted_param %>%
filter(model_type == "buchanan_no_lag")
aic_by_model <- fitted_param %>%
filter(model_type %in% c("buchanan_no_lag", "gompertz")) %>%
group_by(model_type) %>%
summarize(mean_aic = mean(aic))
#Push the processed data back to the R project
date <- Sys.Date()
View(fitted_param)
#buchanan
b132_buchanan_nls_lm_6_3 <- nlsLM(log_average_wrangled_conc ~
buchanan(day, log10n0, log10nmax, mumax, lag),
data = b132_6_3,
start=list(
log10n0 = param_estimates$n0[b132_6_3_index],
log10nmax = param_estimates$nmax[b132_6_3_index],
mumax = (param_estimates$mumax[b132_6_3_index]*2.303),
lag = param_estimates$lag[b132_6_3_index]),
lower = c(0, 0, 0, 0))
fitted_param$isolate[28] <-"S12-0132"
fitted_param$pop[28] <-"apc"
fitted_param$model_type[28] <-"buchanan"
fitted_param$n0[28] <- summary(b132_buchanan_nls_lm_6_3)$coefficient[1]
fitted_param$lag[28] <- summary(b132_buchanan_nls_lm_6_3)$coefficient[4]
fitted_param$mumax[28] <- summary(b132_buchanan_nls_lm_6_3)$coefficient[3]
fitted_param$nmax[28] <- summary(b132_buchanan_nls_lm_6_3)$coefficient[2]
fitted_param$temp[28] <- "6"
fitted_param$aic[28] <- AIC(b132_buchanan_nls_lm_6_3)
fitted_param$bic[28] <- BIC(b132_buchanan_nls_lm_6_3)
fitted_param$fit[28] <- "no"
fitted_param$method[28] <- "nls_lm"
fitted_param$rep[28] <- "3"
## ---------------------------Packages------------------------------------------
#   Loading packages
library(tidyverse); library(dplyr); library(Metrics)
citation("Metrics")
citation("nlsMicrobio")
setwd("/Volumes/BoorWiedmannLab/ss2633_Sriya_Sunil/Administrative/Papers/Paper1/analyses/2019_isolates")
##--------------------------Packages--------------------------------------------
library(dplyr); library(tidyverse)
##--------------------------Raw Data--------------------------------------------
blast <- read.csv("data/raw/0919a_raw_blast_results.csv", header = TRUE)
metadata <- read.csv("data/raw/FMT_isolates.csv", header = TRUE)
##--------------------------Wrangling-------------------------------------------
top_match <- blast %>%
group_by(qseqid) %>%
arrange(desc(pident)) %>%
slice(1)
top_match$qseqid <- gsub("M9-0544", "M9-0554", top_match$qseqid)
top_match_pruned <- top_match %>%
select(qseqid, subject.titles)
top_match_pruned$qseqid <- gsub("0919a", "", top_match_pruned$qseqid)
metadata_pruned <- metadata %>%
select(FSL, Previous.ID)
fsl_previd <- merge(top_match_pruned, metadata_pruned, by.x = "qseqid", by.y = ("FSL"), all = FALSE)
date <- Sys.Date()
date <- gsub("-", "_", date)
#write.csv(fsl_previd, paste0("data/wrangled/", date, "_0919a_isolates_fsl_previd.csv"), row.names = FALSE)
write.csv(fsl_previd, paste0("data/wrangled/", date, "_0919a_isolates_fsl_previd.csv"), row.names = FALSE)
write.csv(fsl_previd, paste0("data/wrangled/", date, "_0919a_isolates_fsl_previd.csv"), row.names = FALSE)
date <- Sys.Date()
date <- gsub("-", "_", date)
write.csv(fsl_previd, paste0("data/wrangled/", date, "_0919a_isolates_fsl_previd.csv"), row.names = FALSE)
library(tidyverse); library(ggplot2); library(stringi);
data <- read.csv("data/wrangled/2023_03_21_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA, NA), sep = " ", extra = "drop")
data$day <- stri_replace_all_regex(data$day,
pattern = c("D0", "D4", "D10", "D20"),
replacement = c(0, 4, 10, 20),
vectorize_all = FALSE)
data$day <- factor(data$day, levels = c("0", "4", "10", "20"))
freq <- data.frame(table(data$genus, data$day))
colnames(freq) <- c("genus", "day", "freq")
freq_plot_data <- freq %>%
filter(freq != 0)
freq_table <- table(data$genus, data$day)
#Color plot
ggplot(data = freq_plot_data, mapping = aes(x = day, y = freq, fill = genus, label = freq)) +
geom_col(position = "stack", color = "black") +
theme_classic() + ylab("Number of isolates") + xlab("Day") +
labs(fill = "Genus") + scale_fill_manual(values = c("#AE76A3","#1965B0", "#5289C7", "#1E9F02",
"#CAE0AB", "#F7F056", "#F6C141","#F1932D", "#E8601C",
"#AFADAD")) +
geom_text(position = position_stack(vjust = 0.5))
#Greyscale plot
angle1 <- rep(c(0, 45,45,135), length.out=10)
angle2 <- rep(c(0, 45,135,135), length.out=10)
density1 <- seq(5,20,length.out=10)
density2 <- seq(5,20,length.out=10)
col <- 1
barplot(freq_table, col = col, angle = angle1, density = density1)
barplot(freq_table, col = col, angle = angle2, density = density2)
legend("topright", legend=1:10, ncol =1, fill=TRUE, col=col, angle=angle1, density=density1)
par(bg="transparent")
legend("topright", legend=1:10, ncol =1, fill=TRUE, col=col, angle=angle2, density=density2)
par(op)
date <- Sys.Date()
date <- gsub("-", "_", date)
library(tidyverse); library(ggplot2); library(stringi);
data <- read.csv("data/wrangled/2023_07_09_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA, NA), sep = " ", extra = "drop")
library(tidyverse); library(ggplot2); library(stringi);
data <- read.csv("data/wrangled/2023_07_09_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA, NA), sep = " ", extra = "drop")
data$day <- stri_replace_all_regex(data$day,
pattern = c("D0", "D4", "D10", "D20"),
replacement = c(0, 4, 10, 20),
vectorize_all = FALSE)
data$day <- factor(data$day, levels = c("0", "4", "10", "20"))
freq <- data.frame(table(data$genus, data$day))
colnames(freq) <- c("genus", "day", "freq")
freq_plot_data <- freq %>%
filter(freq != 0)
freq_table <- table(data$genus, data$day)
#Color plot
ggplot(data = freq_plot_data, mapping = aes(x = day, y = freq, fill = genus, label = freq)) +
geom_col(position = "stack", color = "black") +
theme_classic() + ylab("Number of isolates") + xlab("Day") +
labs(fill = "Genus") + scale_fill_manual(values = c("#AE76A3","#1965B0", "#5289C7", "#1E9F02",
"#CAE0AB", "#F7F056", "#F6C141","#F1932D", "#E8601C",
"#AFADAD")) +
geom_text(position = position_stack(vjust = 0.5))
#Greyscale plot
angle1 <- rep(c(0, 45,45,135), length.out=10)
angle2 <- rep(c(0, 45,135,135), length.out=10)
density1 <- seq(5,20,length.out=10)
density2 <- seq(5,20,length.out=10)
col <- 1
barplot(freq_table, col = col, angle = angle1, density = density1)
barplot(freq_table, col = col, angle = angle2, density = density2)
legend("topright", legend=1:10, ncol =1, fill=TRUE, col=col, angle=angle1, density=density1)
par(bg="transparent")
legend("topright", legend=1:10, ncol =1, fill=TRUE, col=col, angle=angle2, density=density2)
par(op)
date <- Sys.Date()
date <- gsub("-", "_", date)
png(paste0("outputs/", date, "_microbial_population_over_shelf_life.png"), width = 150, height = 150, units = "mm", res = 1200)
ggplot(data = freq_plot_data, mapping = aes(x = day, y = freq, fill = genus, label = freq)) +
geom_col(position = "stack", color = "black") +
theme_classic() + ylab("Number of isolates") + xlab("Day") +
labs(fill = "Genus") + scale_fill_manual(values = c("#AE76A3","#1965B0", "#5289C7", "#1E9F02",
"#CAE0AB", "#F7F056", "#F6C141","#F1932D", "#E8601C",
"#AFADAD")) +
geom_text(position = position_stack(vjust = 0.5))
dev.off()
library(dplyr); library(tidyverse); library(vegan)
citation("vegan")
data <- read.csv("data/wrangled/2023_03_21_0919a_isolates_fsl_previd.csv", header = TRUE)
at_data <- read.csv("data/raw/16S_AT_assignment.csv", header = TRUE)
at_data <- separate(at_data,
Original_ID,
into = c("sampling", "sample_replicate", "day", "test", "isolate_number"),
sep = "-")
setwd("/Volumes/BoorWiedmannLab/ss2633_Sriya_Sunil/Administrative/Papers/Paper1/analyses/2019_isolates")
data <- read.csv("data/wrangled/2023_03_21_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- read.csv("data/wrangled/2023_03_21_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- read.csv("data/wrangled/2023_07_09_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA), sep = " ")
at_data <- read.csv("data/raw/16S_AT_assignment.csv", header = TRUE)
at_data <- separate(at_data,
Original_ID,
into = c("sampling", "sample_replicate", "day", "test", "isolate_number"),
sep = "-")
at_data <- at_data %>%
filter(Sequenced.isolates %in% data$qseqid)
#Creating a matrix for assessing alpha-diversity, based on 16S AT
at_table <- as.matrix(table(at_data$day, at_data$AT))
genera_summary <- data.frame(table(data$genus))
other_genera <- genera_summary %>%
filter(Freq < 3) %>%
select(Var1)
other_genera <- as.character(other_genera$Var1)
other_genera <- print(other_genera, quote = FALSE)
data$high_freq_genera <- ifelse(data$genus %in% other_genera, "Other", data$genus)
at_freq_table <- at_data %>%
group_by(AT) %>%
summarize(count = n())
at_table
shannon
shannon <- diversity(at_table, index = "shannon")
shannon
## ---------------------------Packages------------------------------------------
#   Loading packages
library(tidyverse); library(dplyr); library(Metrics)
## ---------------------------Data----------------------------------------------
#   Reading in raw data
model_output <- read.csv("total_count_by_package2023_06_23.csv", header = TRUE)
setwd("/Volumes/BoorWiedmannLab/ss2633_Sriya_Sunil/Research/CIDA_Spinach_Project/Model/shelf_life_model_v1.0.0/output_analysis")
## ---------------------------Packages------------------------------------------
#   Loading packages
library(tidyverse); library(dplyr); library(Metrics)
## ---------------------------Data----------------------------------------------
#   Reading in raw data
model_output <- read.csv("total_count_by_package2023_06_23.csv", header = TRUE)
sampling_data <- read.csv("0919a_microbial_counts_2023_01_27.csv", header = TRUE)
## ---------------------------Checking model output distribution----------------
day <- 1:20
p_val <- vector(mode = "integer", length = length(day))
model_output_shapiro <- data.frame(cbind(day, p_val))
for(i in 1:20){
data <- model_output$total_count[model_output$day == i]
test <- shapiro.test(data)
model_output_shapiro$p_val[model_output_shapiro$day == i] <- test$p.value
}
med_shelf_life <- model_output %>%
group_by(day) %>%
summarize(median = median(total_count))
shelf_life_data <- sampling_data %>%
filter(grepl("D", sample_id)) %>%
filter(!(sample_id %in% c("D", "D0")) & test == "APC")
shelf_life_data$sample_id <- gsub("D", "", shelf_life_data$sample_id)
shelf_life_data$sample_id <- as.numeric(shelf_life_data$sample_id)
med_shelf_life <- med_shelf_life %>%
filter(day %in% shelf_life_data$sample_id)
#Calculating the geometrically averaged mean observation for each day of sampling
shelf_life_data_rmse <-shelf_life_data %>%
mutate(log_conc = log10(average_conc)) %>%
group_by(sampling, sample_id) %>%
summarize(geom_log_conc = mean(log_conc))
rmse_sum <- 0
for(i in 1:nrow(shelf_life_data_rmse)){
d <- shelf_life_data_rmse$sample_id[i]
add <- (med_shelf_life$median[med_shelf_life$day == d] -
shelf_life_data_rmse$geom_log_conc[shelf_life_data_rmse$sample_id == d])^2
rmse_sum <- rmse_sum + add
}
#RMSE
rmse_manual <- sqrt(rmse_sum/nrow(shelf_life_data_rmse))
rmse_manual
rmse_auto <- rmse(shelf_life_data_rmse$geom_log_conc, med_shelf_life$median)
rmse_auto
## ---------------------------Accuracy factor-----------------------------------
#Calculating the geometrically averaged mean observation for each day of sampling
shelf_life_data_af <-shelf_life_data_rmse %>%
mutate(geom_ln_conc = log(geom_log_conc)) %>%
dplyr::select(-geom_log_conc)
med_shelf_life_af <- med_shelf_life %>%
mutate(median_ln = log(median)) %>%
dplyr::select(-median)
af_sum <- 0
for(i in 1:nrow(shelf_life_data_af)){
d <- shelf_life_data_af$sample_id[i]
add <- (med_shelf_life_af$median_ln[med_shelf_life_af$day == d] -
shelf_life_data_af$geom_ln_conc[shelf_life_data_af$sample_id == d])^2
af_sum <- af_sum + add
}
#Accuracy factor
af <- exp(sqrt(af_sum/nrow(shelf_life_data_af)))
percent_discrep <- (af - 1)*100
percent_discrep
percent_discrep
bf_sum <- 0
for(i in 1:nrow(shelf_life_data_af)){
d <- shelf_life_data_af$sample_id[i]
add <- (med_shelf_life_af$median_ln[med_shelf_life_af$day == d] -
shelf_life_data_af$geom_ln_conc[shelf_life_data_af$sample_id == d])
bf_sum <- bf_sum + add
}
#Accuracy factor
bf <- exp(bf_sum/nrow(shelf_life_data_af))
percent_bias <- (-1)*(exp(abs(log(bf))) - 1)*100
percent_bias
af
af
percent_discrep <- (af - 1)*100
percent_discrep
exp(1)
exp(o)
exp(0)
percent_bias
