simpson <- diversity(at_table, index = "shannon")
shannon <- diversity(at_table, index = "shannon")
shannon
shannon <- diversity(at_table[-1], index = "shannon")
shannon
shannon <- diversity(at_table, index = "shannon")
shannon
at_table[-1, -1]
shannon <- diversity(at_table, index = "shannon")
shannon
shannon
library(dplyr); library(tidyverse); library(vegan)
sessionInfo()
data <- read.csv("data/wrangled/2022_11_17_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(sseqid, c("genus", "species", NA, NA, NA), sep = "_")
at_data <- read.csv("data/raw/16S_AT_assignment.csv", header = TRUE)
at_data <- separate(at_data,
Original_ID,
into = c("sampling", "sample_replicate", "day", "test", "isolate_number"),
sep = "-")
#Creating a matrix for assessing alpha-diversity, based on 16S AT
at_table <- as.matrix(table(at_data$day, at_data$AT))
genera_summary <- data.frame(table(data$genus))
rare_genera <- genera_summary %>%
filter(Freq < 3) %>%
select(Var1)
rare_genera <- as.character(rare_genera$Var1)
rare_genera <- print(rare_genera, quote = FALSE)
data$high_freq_genera <- ifelse(data$genus %in% rare_genera, "Rare", data$genus)
shannon <- diversity(at_table, index = "shannon")
test_data <- select(data, c("day", "high_freq_genera"))
test_data$day <- as.factor(test_data$day)
test_data$high_freq_genera <- as.factor(test_data$high_freq_genera)
test_data
chisq.test(test_data$day, test_data$high_freq_genera, simulate.p.value = TRUE)$expected
table(test_data$day, test_data$high_freq_genera)
library(dplyr); library(tidyverse); library(vegan)
data <- read.csv("data/wrangled/2022_11_17_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(sseqid, c("genus", "species", NA, NA, NA), sep = "_")
at_data <- read.csv("data/raw/16S_AT_assignment.csv", header = TRUE)
at_data <- separate(at_data,
Original_ID,
into = c("sampling", "sample_replicate", "day", "test", "isolate_number"),
sep = "-")
#Creating a matrix for assessing alpha-diversity, based on 16S AT
at_table <- as.matrix(table(at_data$day, at_data$AT))
genera_summary <- data.frame(table(data$genus))
other_genera <- genera_summary %>%
filter(Freq < 3) %>%
select(Var1)
other_genera <- as.character(rare_genera$Var1)
other_genera <- print(rare_genera, quote = FALSE)
data$high_freq_genera <- ifelse(data$genus %in% rare_genera, "Other", data$genus)
#Creating a matrix for assessing alpha-diversity, based on 16S AT
at_table <- as.matrix(table(at_data$day, at_data$AT))
genera_summary <- data.frame(table(data$genus))
other_genera <- genera_summary %>%
filter(Freq < 3) %>%
select(Var1)
other_genera <- as.character(rare_genera$Var1)
other_genera <- as.character(other_genera$Var1)
other_genera <- print(other_genera, quote = FALSE)
data$high_freq_genera <- ifelse(data$genus %in% other_genera, "Other", data$genus)
data <- read.csv("data/wrangled/2022_11_17_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(sseqid, c("genus", "species", NA, NA, NA), sep = "_")
at_data <- read.csv("data/raw/16S_AT_assignment.csv", header = TRUE)
at_data <- separate(at_data,
Original_ID,
into = c("sampling", "sample_replicate", "day", "test", "isolate_number"),
sep = "-")
#Creating a matrix for assessing alpha-diversity, based on 16S AT
at_table <- as.matrix(table(at_data$day, at_data$AT))
genera_summary <- data.frame(table(data$genus))
other_genera <- genera_summary %>%
filter(Freq < 3) %>%
select(Var1)
other_genera <- as.character(other_genera$Var1)
other_genera <- print(other_genera, quote = FALSE)
data$high_freq_genera <- ifelse(data$genus %in% other_genera, "Other", data$genus)
shannon <- diversity(at_table, index = "shannon")
test_data <- select(data, c("day", "high_freq_genera"))
test_data$day <- as.factor(test_data$day)
test_data$high_freq_genera <- as.factor(test_data$high_freq_genera)
chisq.test(test_data$day, test_data$high_freq_genera, simulate.p.value = TRUE)$expected
test <- fisher.test(table(test_data$day, test_data$high_freq_genera))
##The input table was larger than 2 x 2
##Hybrid = False (default setting). The exact test could be conducted on the full
# table, so this option was left as false. If hybrid was true, a chi-square test
# would be conducted if Cochran's conditions were met (these conditions were not met,
# as found out earlier.)
##Simulate p-value= False. The exact test could be conducted on the full table,
# so there is no need to simulate the p-value
test
library(dplyr); library(tidyverse); library(vegan)
data <- read.csv("data/wrangled/2022_11_17_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(sseqid, c("genus", "species", NA, NA, NA), sep = "_")
at_data <- read.csv("data/raw/16S_AT_assignment.csv", header = TRUE)
at_data <- separate(at_data,
Original_ID,
into = c("sampling", "sample_replicate", "day", "test", "isolate_number"),
sep = "-")
#Creating a matrix for assessing alpha-diversity, based on 16S AT
at_table <- as.matrix(table(at_data$day, at_data$AT))
genera_summary <- data.frame(table(data$genus))
other_genera <- genera_summary %>%
filter(Freq < 3) %>%
select(Var1)
other_genera <- as.character(other_genera$Var1)
other_genera <- print(other_genera, quote = FALSE)
data$high_freq_genera <- ifelse(data$genus %in% other_genera, "Other", data$genus)
shannon <- diversity(at_table, index = "shannon")
simpson <- diversity(at_table, index = "simspon")
simpson <- diversity(at_table, index = "simpson")
simpson
diversity(at_table, index = "shannon")
##--------------------------Packages--------------------------------------------
library(dplyr); library(tidyverse)
##--------------------------Raw Data--------------------------------------------
blast <- read.csv("data/raw/0919a_raw_blast_results.csv", header = TRUE)
metadata <- read.csv("data/raw/FMT_isolates.csv", header = TRUE)
##--------------------------Wrangling-------------------------------------------
top_match <- blast %>%
group_by(qseqid) %>%
arrange(desc(pident)) %>%
slice(1)
top_match$qseqid <- gsub("M9-0544", "M9-0554", top_match$qseqid)
top_match_pruned <- top_match %>%
select(qseqid, subject.titles)
top_match_pruned$qseqid <- gsub("0919a", "", top_match_pruned$qseqid)
metadata_pruned <- metadata %>%
select(FSL, Previous.ID)
fsl_previd <- merge(top_match_pruned, metadata_pruned, by.x = "qseqid", by.y = ("FSL"), all = FALSE)
date <- Sys.Date()
date <- gsub("-", "_", date)
library(tidyverse); library(ggplot2); library(stringi);
data <- read.csv("data/wrangled/2022_11_17_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- read.csv("data/wrangled/2023_03_21_0919a_isolates_fsl_previd.csv", header = TRUE)
library(tidyverse); library(ggplot2); library(stringi);
data <- read.csv("data/wrangled/2023_03_21_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(sseqid, c("genus", "species", NA, NA, NA), sep = "_")
View(data)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA, NA), sep = " ")
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA, NA), sep = " ", extra = "drop")
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA, NA), sep = " ", extra = "drop")
data <- read.csv("data/wrangled/2023_03_21_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA, NA), sep = " ", extra = "drop")
library(tidyverse); library(ggplot2); library(stringi);
data <- read.csv("data/wrangled/2023_03_21_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA, NA), sep = " ", extra = "drop")
data$day <- stri_replace_all_regex(data$day,
pattern = c("D0", "D4", "D10", "D20"),
replacement = c(0, 4, 10, 20),
vectorize_all = FALSE)
data$day <- factor(data$day, levels = c("0", "4", "10", "20"))
freq <- data.frame(table(data$genus, data$day))
colnames(freq) <- c("genus", "day", "freq")
freq_plot_data <- freq %>%
filter(freq != 0)
freq_table <- table(data$genus, data$day)
#Color plot
ggplot(data = freq_plot_data, mapping = aes(x = day, y = freq, fill = genus, label = freq)) +
geom_col(position = "stack", color = "black") +
theme_classic() + ylab("Number of isolates") + xlab("Day") +
labs(fill = "Genus") + scale_fill_manual(values = c("#AE76A3","#1965B0", "#5289C7", "#1E9F02",
"#CAE0AB", "#F7F056", "#F6C141","#F1932D", "#E8601C",
"#AFADAD")) +
geom_text(position = position_stack(vjust = 0.5))
#Greyscale plot
angle1 <- rep(c(0, 45,45,135), length.out=10)
angle2 <- rep(c(0, 45,135,135), length.out=10)
density1 <- seq(5,20,length.out=10)
density2 <- seq(5,20,length.out=10)
col <- 1
barplot(freq_table, col = col, angle = angle1, density = density1)
barplot(freq_table, col = col, angle = angle2, density = density2)
legend("topright", legend=1:10, ncol =1, fill=TRUE, col=col, angle=angle1, density=density1)
par(bg="transparent")
legend("topright", legend=1:10, ncol =1, fill=TRUE, col=col, angle=angle2, density=density2)
par(op)
date <- Sys.Date()
date <- gsub("-", "_", date)
png(paste0("outputs/", date, "_microbial_population_over_shelf_life.png"), width = 150, height = 150, units = "mm", res = 1200)
ggplot(data = freq_plot_data, mapping = aes(x = day, y = freq, fill = genus, label = freq)) +
geom_col(position = "stack", color = "black") +
theme_classic() + ylab("Number of isolates") + xlab("Day") +
labs(fill = "Genus") + scale_fill_manual(values = c("#AE76A3","#1965B0", "#5289C7", "#1E9F02",
"#CAE0AB", "#F7F056", "#F6C141","#F1932D", "#E8601C",
"#AFADAD")) +
geom_text(position = position_stack(vjust = 0.5))
dev.off()
ggplot(data = freq_plot_data, mapping = aes(x = day, y = freq, fill = genus, label = freq)) +
geom_col(position = "stack", color = "black") +
theme_classic() + ylab("Number of isolates") + xlab("Day") +
labs(fill = "Genus") + scale_fill_manual(values = c("#AE76A3","#1965B0", "#5289C7", "#1E9F02",
"#CAE0AB", "#F7F056", "#F6C141","#F1932D", "#E8601C",
"#AFADAD")) +
geom_text(position = position_stack(vjust = 0.5))
library(dplyr); library(tidyverse); library(vegan)
data <- read.csv("data/wrangled/2023_03_21_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(sseqid, c("genus", "species", NA, NA, NA), sep = "_")
at_data <- read.csv("data/raw/16S_AT_assignment.csv", header = TRUE)
at_data <- separate(at_data,
Original_ID,
into = c("sampling", "sample_replicate", "day", "test", "isolate_number"),
sep = "-")
#Creating a matrix for assessing alpha-diversity, based on 16S AT
at_table <- as.matrix(table(at_data$day, at_data$AT))
genera_summary <- data.frame(table(data$genus))
other_genera <- genera_summary %>%
filter(Freq < 3) %>%
select(Var1)
other_genera <- as.character(other_genera$Var1)
other_genera <- print(other_genera, quote = FALSE)
data$high_freq_genera <- ifelse(data$genus %in% other_genera, "Other", data$genus)
simpson <- diversity(at_table, index = "simpson")
simpson
simpson <- diversity(at_table, index = "shannon")
shannon <- diversity(at_table, index = "shannon")
shannon
View(data)
View(data)
View(at_data)
View(at_data)
at_data <- at_data %>%
filter(Sequenced.isolates %in% data$qseqid)
View(at_data)
#Creating a matrix for assessing alpha-diversity, based on 16S AT
at_table <- as.matrix(table(at_data$day, at_data$AT))
genera_summary <- data.frame(table(data$genus))
other_genera <- genera_summary %>%
filter(Freq < 3) %>%
select(Var1)
other_genera <- as.character(other_genera$Var1)
other_genera <- print(other_genera, quote = FALSE)
data$high_freq_genera <- ifelse(data$genus %in% other_genera, "Other", data$genus)
shannon <- diversity(at_table, index = "shannon")
shannon
data$high_freq_genera
genera_summary <- data.frame(table(data$genus))
View(genera_summary)
genera_summary <- data.frame(table(data$genus))
View(at_data)
View(data)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA), sep = "_")
library(dplyr); library(tidyverse); library(vegan)
data <- read.csv("data/wrangled/2023_03_21_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA), sep = " ")
at_data <- read.csv("data/raw/16S_AT_assignment.csv", header = TRUE)
at_data <- separate(at_data,
Original_ID,
into = c("sampling", "sample_replicate", "day", "test", "isolate_number"),
sep = "-")
at_data <- at_data %>%
filter(Sequenced.isolates %in% data$qseqid)
#Creating a matrix for assessing alpha-diversity, based on 16S AT
at_table <- as.matrix(table(at_data$day, at_data$AT))
genera_summary <- data.frame(table(data$genus))
other_genera <- genera_summary %>%
filter(Freq < 3) %>%
select(Var1)
View(genera_summary)
48/84 * 100
21/84 * 100
7/84 * 100
View(data)
View(at_data)
shannon
library(dplyr); library(tidyverse); library(vegan)
data <- read.csv("data/wrangled/2023_07_09_0919a_isolates_fsl_previd.csv", header = TRUE)
data <- data %>%
separate(Previous.ID, c("sampling", "sample_name", "day", "media", "isolate_number"), sep = "-") %>%
separate(subject.titles, c("genus", "species", NA, NA, NA), sep = " ")
at_data <- read.csv("data/raw/16S_AT_assignment.csv", header = TRUE)
at_data <- separate(at_data,
Original_ID,
into = c("sampling", "sample_replicate", "day", "test", "isolate_number"),
sep = "-")
at_data <- at_data %>%
filter(Sequenced.isolates %in% data$qseqid)
#Creating a matrix for assessing alpha-diversity, based on 16S AT
at_table <- as.matrix(table(at_data$day, at_data$AT))
genera_summary <- data.frame(table(data$genus))
other_genera <- genera_summary %>%
filter(Freq < 3) %>%
select(Var1)
other_genera <- as.character(other_genera$Var1)
other_genera <- print(other_genera, quote = FALSE)
data$high_freq_genera <- ifelse(data$genus %in% other_genera, "Other", data$genus)
at_freq_table <- at_data %>%
group_by(AT) %>%
summarize(count = n())
shannon <- diversity(at_table, index = "shannon")
test_data <- select(data, c("day", "high_freq_genera"))
test_data$day <- as.factor(test_data$day)
test_data$high_freq_genera <- as.factor(test_data$high_freq_genera)
chisq.test(test_data$day, test_data$high_freq_genera, simulate.p.value = TRUE)$expected
test <- fisher.test(table(test_data$day, test_data$high_freq_genera))
##The input table was larger than 2 x 2
##Hybrid = False (default setting). The exact test could be conducted on the full
# table, so this option was left as false. If hybrid was true, a chi-square test
# would be conducted if Cochran's conditions were met (these conditions were not met,
# as found out earlier.)
##Simulate p-value= False. The exact test could be conducted on the full table,
# so there is no need to simulate the p-value
test
knitr::opts_chunk$set(echo = TRUE)
```{r}
library(ggplot2)
library(tidyverse)
library(reshape2)
library(gridExtra)
library(emmeans)
library(lme4)
library(lme4)
library(lmerTest)
library(RColorBrewer)
library(ggplot2)
library(tidyverse)
library(reshape2)
library(gridExtra)
library(emmeans)
library(lme4)
library(lmerTest)
library(RColorBrewer)
```{r}
counts_df <- read.csv("CombinedCounts.csv", header = T)
counts_melt_df <- melt(counts_df, id.vars = "Plate_Id")
counts_log <- log(counts_melt_df$value, base = 10)
counts_log_melt_df <- cbind(counts_melt_df[,c(1,2)], counts_log)
counts_log_melt_df$Plate_Id <- as.character(counts_log_melt_df$Plate_Id)
isolate_ID <- vapply(strsplit(counts_log_melt_df$Plate_Id, "_"), function(x) paste(x[1:2], collapse = "-"), FUN.VALUE = character(1L))
Replicate_ID <- vapply(strsplit(counts_log_melt_df$Plate_Id, "_"), '[', 3, FUN.VALUE = character(1))
finaldf <- data.frame(cbind(isolate_ID, Replicate_ID, counts_log_melt_df))
colnames(finaldf)[1:2] <- c("Isolate_ID", "Replicate_ID")
wt <- c("M9-0536", "M9-0538", "M9-0540", "M9-0610", "M9-0617", "S12-0061", "S12-0074", "M9-0544", "M9-0547", "M9-0550", "M9-0606", "S12-0025", "S12-0004", "S12-0048", "S12-0063")
rif <- c("S12-0116", "S12-0126", "S12-0132", "S12-0150", "S12-0156", "S12-0173", "S12-0184", "S12-0139", "S12-0188", "S12-0195", "S12-0141", "S12-0151", "S12-0166", "S12-0163", "S12-0180")
counts_df <- read.csv("CombinedCounts.csv", header = T)
counts_melt_df <- melt(counts_df, id.vars = "Plate_Id")
counts_log <- log(counts_melt_df$value, base = 10)
counts_log_melt_df <- cbind(counts_melt_df[,c(1,2)], counts_log)
counts_log_melt_df$Plate_Id <- as.character(counts_log_melt_df$Plate_Id)
isolate_ID <- vapply(strsplit(counts_log_melt_df$Plate_Id, "_"), function(x) paste(x[1:2], collapse = "-"), FUN.VALUE = character(1L))
Replicate_ID <- vapply(strsplit(counts_log_melt_df$Plate_Id, "_"), '[', 3, FUN.VALUE = character(1))
finaldf <- data.frame(cbind(isolate_ID, Replicate_ID, counts_log_melt_df))
colnames(finaldf)[1:2] <- c("Isolate_ID", "Replicate_ID")
wt <- c("M9-0536", "M9-0538", "M9-0540", "M9-0610", "M9-0617", "S12-0061", "S12-0074", "M9-0544", "M9-0547", "M9-0550", "M9-0606", "S12-0025", "S12-0004", "S12-0048", "S12-0063")
rif <- c("S12-0116", "S12-0126", "S12-0132", "S12-0150", "S12-0156", "S12-0173", "S12-0184", "S12-0139", "S12-0188", "S12-0195", "S12-0141", "S12-0151", "S12-0166", "S12-0163", "S12-0180")
```{r}
d0_d3 <- (log(counts_df$Day_3,base = 10) - log(counts_df$Day_0, base = 10))
d3_d6 <- (log(counts_df$Day_6,base = 10) - log(counts_df$Day_3, base = 10))
net_growth_table <- data.frame(cbind(counts_df$Plate_Id, d0_d3, d3_d6))
colnames(net_growth_table) <- c("Isolate_ID", "Day_0-3", "Day_3-6")
melt_net_growth_table <- melt(net_growth_table, id.vars = "Isolate_ID")
isolate_ID_mu <- vapply(strsplit(melt_net_growth_table$Isolate_ID, "_"), function(x) paste(x[1:2], collapse = "-"), FUN.VALUE = character(1L))
Replicate_ID_mu <- vapply(strsplit(melt_net_growth_table$Isolate_ID, "_"), '[', 3, FUN.VALUE = character(1))
net_growth_df <- cbind(isolate_ID_mu, Replicate_ID_mu, melt_net_growth_table[,2:3])
colnames(net_growth_df)[1:3] <- c("Isolate_ID", "Replicate_ID", "Duration")
net_growth_df$value <- as.numeric(net_growth_df$value)
change_summary <- net_growth_df %>%
group_by(Isolate_ID, Duration) %>%
summarize(mean = round(mean(value), 2), sd = round(sd(value), 2))
View(change_summary)
#   Loading packages
library(dplyr); library(tidyverse); library(ggplot2); library(RColorBrewer); library(forcats)
b_mumax <- read.csv("sa_outcome/sa_b_mumax_threshold_2023_08_04.csv", header = T)
lag_tmin <- read.csv("sa_outcome/sa_lag_tmin_threshold_2023_08_04.csv", header = T)
setwd("/Volumes/BoorWiedmannLab/ss2633_Sriya_Sunil/Research/CIDA_Spinach_Project/Model/shelf_life_model_v1.0.0/sensitivity_analysis/sa_analysis_outcome_plotting")
b_mumax <- read.csv("sa_outcome/sa_b_mumax_threshold_2023_08_04.csv", header = T)
lag_tmin <- read.csv("sa_outcome/sa_lag_tmin_threshold_2023_08_04.csv", header = T)
mumax_tmin <- read.csv("sa_outcome/sa_mumax_tmin_threshold_2023_08_04.csv", header = T)
mumax <- read.csv("sa_outcome/sa_mumax_threshold_2023_08_04.csv", header = T)
n0 <- read.csv("sa_outcome/sa_n0_threshold_2023_08_04.csv", header = T)
nmax <- read.csv("sa_outcome/sa_nmax_threshold_2023_08_04.csv", header = T)
strain_no <- read.csv("sa_outcome/sa_strain_no_threshold_2023_08_04.csv", header = T)
strain_type <- read.csv("sa_outcome/sa_strain_type_threshold_2023_08_04.csv", header = T)
lag <- read.csv("sa_outcome/lag_threshold_2023_08_04.csv", header = T)
df <- rbind(b_mumax, mumax_tmin, lag_tmin, mumax, n0, nmax, strain_type, lag)
df["baseline"] <- ifelse(df$adj == 1.0, "y", "n")
df$param <- as.factor(df$param)
df <- df %>%
mutate(percent_fail = prop_spoiled*100) %>%
group_by(param, day) %>%
mutate(dev_baseline = percent_fail - percent_fail[baseline == "y"]) %>%
ungroup()
df <- df %>%
group_by(day, param) %>%
mutate(dev_baseline_rel = case_when(
adj == 0.4 ~ dev_baseline - dev_baseline[adj == 0.6],
adj == 0.6 ~ dev_baseline - dev_baseline[adj == 0.8],
adj == 0.8  ~ dev_baseline - dev_baseline[adj == 1.0],
adj == 1.2 ~ dev_baseline - dev_baseline[adj == 1.0],
adj == 1.4 ~ dev_baseline - dev_baseline[adj == 1.2],
adj == 1.6 ~ dev_baseline - dev_baseline[adj == 1.4]
))
df$adj <- as.factor(df$adj)
df$adj <- recode(df$adj, "0.4" = "l_60",
"0.6" = "l_40",
"0.8" = "l_20",
"1" = "b",
"1.2" = "u_20",
"1.4" = "u_40",
"1.6" = "u_60")
day_18 <- filter(df, day == "18")  %>%
filter(adj != "b") %>%
arrange(desc(adj))
day_18_summary <- day_18 %>%
group_by(param) %>%
summarise(range = abs(percent_fail[adj == "u_60"] - percent_fail[adj == "l_60"]))
day_18$param <- factor(day_18$param, levels = c("lag_tmin", "fastest_strain_s12_0141", "lag","highest_nmax_s12_0132", "mumax", "mumax_tmin","b_mumax", "n0", "nmax"))
day_18$adj <- factor(day_18$adj, levels = c("l_60", "l_40", "l_20", "u_60", "u_40", "u_20"))
View(day_18)
#   Loading packages
library(dplyr); library(tidyverse); library(ggplot2); library(RColorBrewer);
library(forcats); library(grDevices); library(extrafont); library(ragg)
b_mumax <- read.csv("sa_outcome/sa_b_mumax_threshold.csv", header = T)
lag_tmin <- read.csv("sa_outcome/sa_lag_tmin_threshold.csv", header = T)
mumax_tmin <- read.csv("sa_outcome/sa_mumax_tmin_threshold.csv", header = T)
mumax <- read.csv("sa_outcome/sa_mumax_threshold.csv", header = T)
n0 <- read.csv("sa_outcome/sa_n0_threshold.csv", header = T)
nmax <- read.csv("sa_outcome/sa_nmax_threshold.csv", header = T)
strain_no <- read.csv("sa_outcome/sa_strain_no_threshold.csv", header = T)
strain_type <- read.csv("sa_outcome/sa_strain_type_threshold.csv", header = T)
lag <- read.csv("sa_outcome/lag_threshold.csv", header = T)
df <- rbind(b_mumax, mumax_tmin, lag_tmin, mumax, n0, nmax, strain_type, lag)
df["baseline"] <- ifelse(df$adj == 1.0, "y", "n")
df$param <- as.factor(df$param)
df <- df %>%
mutate(percent_fail = prop_spoiled*100) %>%
group_by(param, day) %>%
mutate(dev_baseline = percent_fail - percent_fail[baseline == "y"]) %>%
ungroup()
df <- df %>%
group_by(day, param) %>%
mutate(dev_baseline_rel = case_when(
adj == 0.4 ~ dev_baseline - dev_baseline[adj == 0.6],
adj == 0.6 ~ dev_baseline - dev_baseline[adj == 0.8],
adj == 0.8  ~ dev_baseline - dev_baseline[adj == 1.0],
adj == 1.2 ~ dev_baseline - dev_baseline[adj == 1.0],
adj == 1.4 ~ dev_baseline - dev_baseline[adj == 1.2],
adj == 1.6 ~ dev_baseline - dev_baseline[adj == 1.4]
))
df$adj <- as.factor(df$adj)
df$adj <- recode(df$adj, "0.4" = "l_60",
"0.6" = "l_40",
"0.8" = "l_20",
"1" = "b",
"1.2" = "u_20",
"1.4" = "u_40",
"1.6" = "u_60")
day_18 <- filter(df, day == "18")  %>%
filter(adj != "b") %>%
arrange(desc(adj))
day_18_summary <- day_18 %>%
group_by(param) %>%
summarise(range = abs(percent_fail[adj == "u_60"] - percent_fail[adj == "l_60"]))
day_18$param <- factor(day_18$param, levels = c("lag_tmin", "fastest_strain_s12_0141", "lag","highest_nmax_s12_0166", "mumax", "mumax_tmin","b_mumax", "n0", "nmax"))
day_18$adj <- factor(day_18$adj, levels = c("l_60", "l_40", "l_20", "u_60", "u_40", "u_20"))
strain_no <- strain_no %>%
mutate(percent_spoiled = prop_spoiled*100)
strain_no_overall_plotting_data <- strain_no
strain_no_overall_plotting_data$day <- as.factor(strain_no_overall_plotting_data$day)
cols <- brewer.pal(6, "PRGn")
day18_tornado_plot <- ggplot(data = day_18, aes(x = param, y = dev_baseline_rel)) +
geom_bar(aes(fill = adj), stat = "identity", color = "black") +
labs(x = "Parameter", y = "Change in packages over the quality threshold, percentage points") +
scale_fill_manual(values = cols, labels = c("Decrease, 60%", "Decrease, 40%", "Decrease, 20%", "Increase, 60%", "Increase, 40%", "Increase, 20%")) +
guides(fill = guide_legend(title = "Percent change")) + theme_bw() +
scale_x_discrete(labels = c(expression("T"["min, "]*lambda), "Strain type:\nFSL S12-0141", expression(lambda), "Strain type:\nFSL S12-0166",
expression(mu["max"]), expression("T"["min, "]*mu[max]), expression("b"[mu[max]]), expression("N"[0]),
expression("N"["max"]))) +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = rel(1.2)),
axis.title.y = element_text(size = rel(1.2)))
day18_tornado_plot + coord_flip()
strain_no_overall_plot_spoil <- ggplot(data = strain_no_overall_plotting_data, aes(x = day, y = percent_spoiled, group = adj)) +
geom_point(aes(shape = adj)) + scale_shape_manual(values = c(0:6)) +
labs(x = "Day", y = "Percentage of packages over the quality threshold") +
guides(shape = guide_legend(title = "Number of strains")) + theme_bw()
strain_no_overall_plot_spoil
agg_tiff("tornado_plot_d18_threshold.tiff", width = 150, height = 150, units = "mm", res = 800)
day18_tornado_plot + coord_flip()
dev.off()
agg_tiff("strain_number.tiff", width = 150, height = 150, units = "mm", res = 800)
strain_no_overall_plot_spoil
dev.off()
