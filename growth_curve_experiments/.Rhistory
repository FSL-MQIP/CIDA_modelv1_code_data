geom_line(data = l4_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 4, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p5_6 <- ggplot(data = l5, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l5_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 5, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p6_6 <- ggplot(data = l6, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l6_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 6, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p7_10 <- ggplot(data = l7, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l7_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 7, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p8_10 <- ggplot(data = l8, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l8_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 8, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_plots <- ggarrange(apc_p1_6 + rremove("ylab") + rremove("xlab"),
apc_p2_6 + rremove("ylab") + rremove("xlab"),
apc_p3_6 + rremove("ylab") + rremove("xlab"),
apc_p4_6 + rremove("ylab") + rremove("xlab"),
apc_p5_6 + rremove("ylab") + rremove("xlab"),
apc_p6_6 + rremove("ylab") + rremove("xlab"),
apc_p7_10 + rremove("ylab") + rremove("xlab"),
apc_p8_10 + rremove("ylab") + rremove("xlab"), ncol = 4, nrow = 2, common.legend = TRUE, legend = "right")
pdf(paste("output/plot/apc_primary_model_plot_", date, ".pdf", sep = ""))
annotate_figure(apc_plots, left = textGrob(expression("Concentration, log"[10]*"CFU/g"), rot = 90, vjust = 1, gp = gpar(cex = 1)),
bottom = textGrob("Day", gp = gpar(cex = 1)))
pdf(paste("outputs/plots/apc_primary_model_plot_", date, ".pdf", sep = ""))
annotate_figure(apc_plots, left = textGrob(expression("Concentration, log"[10]*"CFU/g"), rot = 90, vjust = 1, gp = gpar(cex = 1)),
bottom = textGrob("Day", gp = gpar(cex = 1)))
dev.off()
## ----------------------Packages-----------------------------------------------
#   Loading packages
library(tidyverse); library(dplyr); library(ggplot2); library(RColorBrewer); library(ggpubr); library(grid)
apc_strain_data <- read.csv("data/wrangled/2023_09_11_apc_strain_averaged_wrangled_03.csv", header = TRUE)
strain_param <- read.csv("outputs/parameters/primary_model_parameters_strain_averaged_2023_09_11.csv", header = TRUE)
apc_param <- read.csv("outputs/parameters/primary_model_parameters_apc_averaged_2023_09_11.csv", header = TRUE)
#Gompertz
gompertz <- function(day, log10n0, log10nmax, mumax, lag){
log10n <- log10n0 + (log10nmax - log10n0) * exp(-exp(mumax * exp(1) * (lag - day) / ((log10nmax - log10n0) * log(10)) + 1))
}
#Buchanan no lag
buchanan_no_lag <- function(day, log10n0, log10nmax, mumax){
log10n <- log10n0 + (day <= ((log10nmax - log10n0) * log(10) / mumax)) * mumax * day / log(10) + (day > ((log10nmax - log10n0) * log(10) / mumax)) * (log10nmax - log10n0)
}
## ----------------------Data Wrangling-----------------------------------------
apc_strain_data$biorep <- as.factor(apc_strain_data$biorep)
#Data is split into strain growth data and APC growth data
strain_data <- apc_strain_data %>%
dplyr::filter(media == "BHIrif")
apc_data <- apc_strain_data %>%
dplyr::filter(media == "BHI")
strains <- c("S12-0116", "S12-0132", "S12-0141")
for(i in 1:nrow(strain_data)){
if(strain_data$isolate[i] %in% strains & strain_data$biorep[i] == 2){
strain_data$biorep[i] <- 1
} else if(strain_data$isolate[i] %in% strains & strain_data$biorep[i] == 3){
strain_data$biorep[i] <- 2
} else if(strain_data$isolate[i] %in% strains & strain_data$biorep[i] == 4){
strain_data$biorep[i] <- 3
}
}
strain_data$biorep <- as.factor(strain_data$biorep)
#Subset strain data by isolate. Creating an empty vector for the predicted value, based on the primary model
b116_6_6 <- filter(strain_data, isolate ==  c("S12-0116")) %>%
filter(temperature == "6")
b132_6_6 <- filter(strain_data, isolate ==  c("S12-0132")) %>%
filter(temperature == "6")
b141_6_6 <- filter(strain_data, isolate ==  c("S12-0141")) %>%
filter(temperature == "6")
b166_6_6 <- filter(strain_data, isolate ==  c("S12-0166")) %>%
filter(temperature == "6")
b180_6_6 <- filter(strain_data, isolate ==  c("S12-0180")) %>%
filter(temperature == "6")
b184_6_6 <- filter(strain_data, isolate ==  c("S12-0184")) %>%
filter(temperature == "6")
b116_10 <- filter(strain_data, isolate ==  c("S12-0116")) %>%
filter(temperature == "10")
b132_10 <- filter(strain_data, isolate ==  c("S12-0132")) %>%
filter(temperature == "10")
b141_10 <- filter(strain_data, isolate ==  c("S12-0141")) %>%
filter(temperature == "10")
b166_10 <- filter(strain_data, isolate ==  c("S12-0166")) %>%
filter(temperature == "10")
b180_10 <- filter(strain_data, isolate ==  c("S12-0180")) %>%
filter(temperature == "10")
b184_10 <- filter(strain_data, isolate ==  c("S12-0184")) %>%
filter(temperature == "10")
#Subset apc data by isolate. Creating an empty vector for the predicted value, based on the primary model
set_1 <- c("S12-0116", "S12-0132", "S12-0141")
set_2 <- c("S12-0166", "S12-0180", "S12-0184")
l1 <- apc_data %>%
filter(isolate %in% set_1 & biorep == "2" & temperature == "6")
l2 <- apc_data %>%
filter(isolate %in% set_1 & biorep == "3" & temperature == "6")
l3 <- apc_data %>%
filter(isolate %in% set_1 & biorep == "4" & temperature == "6")
l4 <- apc_data %>%
filter(isolate %in% set_2 & biorep == "1" & temperature == "6") %>%
filter(time == "36")
l5 <- apc_data %>%
filter(isolate %in% set_2 & biorep == "2" & temperature == "6") %>%
filter(time == "36")
l6 <- apc_data %>%
filter(isolate %in% set_2 & biorep == "3" & temperature == "6") %>%
filter(time == "36")
l7 <- apc_data %>%
filter(isolate %in% set_1 & temperature == "10")
l8 <- apc_data %>%
filter(isolate %in% set_2 & temperature == "10") %>%
filter(time == "36")
#Strain: Creating a dataframe to calculate the predicted value based on the primary models
isolates_6 <- rep(c(rep(c("S12-0116", "S12-0132", "S12-0141"), each = 25), rep(c("S12-0166", "S12-0180", "S12-0184"), each = 31)), each = 1)
strain_day_6 <- c(rep(0:24, times = 3), rep(0:30, times = 3))
strain_temp_6 <- rep("6", times = length(isolates_6))
strain_predicted_concentration_6 <- vector(mode = "logical", length = length(isolates_6))
isolates_10 <- rep(c(rep(c("S12-0116", "S12-0132", "S12-0141"), each = 25), rep(c("S12-0166", "S12-0180", "S12-0184"), each = 31)), each = 1)
strain_day_10 <- rep(c(rep(0:24, times = 3), rep(0:30, times = 3)), each = 1)
strain_temp_10 <- rep("10", times = length(isolates_10))
strain_predicted_concentration_10 <- vector(mode = "logical", length = length(isolates_10))
strain_pred_6 <- bind_cols(isolates_6, strain_day_6, strain_temp_6, strain_predicted_concentration_6)
colnames(strain_pred_6) <- c("isolate", "day", "temp", "predicted_concentration")
strain_pred_10 <- bind_cols(isolates_10, strain_day_10, strain_temp_10, strain_predicted_concentration_10)
colnames(strain_pred_10) <- c("isolate", "day", "temp", "predicted_concentration")
strain_pred <- rbind(strain_pred_6, strain_pred_10)
#Strain: Populating the predicted value column for the data frame created above, based on the primary models
for(i in 1:nrow(strain_pred)){
row_index <- which(strain_param$isolate == strain_pred$isolate[i] & strain_param$temp == strain_pred$temp[i])
strain_pred$predicted_concentration[i] <- gompertz(strain_pred$day[i], strain_param$n0[row_index], strain_param$nmax[row_index], strain_param$mumax[row_index], strain_param$lag[row_index])
}
#APC: Creating a dataframe to calculate the predicted value based on the primary models
lots_6 <- rep(c(rep(c("1", "2", "3"), each = 25), rep(c("4", "5", "6"), each = 31)))
apc_day_6 <- c(rep(0:24, times = 3), rep(0:30, times = 3))
apc_temp_6 <- rep("6", times = length(lots_6))
apc_predicted_concentration_6 <- vector(mode = "logical", length = length(lots_6))
lots_10 <- rep(c(rep(c("7"), each = 25), rep(c("8"), each = 31)), each = 1)
apc_day_10 <- rep(c(rep(0:24, times = 1), rep(0:30, times = 1)), each = 1)
apc_temp_10 <- rep("10", times = length(lots_10))
apc_predicted_concentration_10 <- vector(mode = "logical", length = length(lots_10))
apc_pred_6 <- bind_cols(lots_6, apc_day_6, apc_temp_6, apc_predicted_concentration_6)
colnames(apc_pred_6) <- c("lot", "day", "temp", "predicted_concentration")
apc_pred_10 <- bind_cols(lots_10, apc_day_10, apc_temp_10, apc_predicted_concentration_10)
colnames(apc_pred_10) <- c("lot", "day", "temp", "predicted_concentration")
apc_pred <- rbind(apc_pred_6, apc_pred_10)
#APC: Populating the predicted value column for the data frame created above, based on the primary models
for(i in 1:nrow(apc_pred)){
row_index <- which(apc_param$lot == apc_pred$lot[i])
apc_pred$predicted_concentration[i] <- buchanan_no_lag(apc_pred$day[i], apc_param$n0[row_index], apc_param$nmax[row_index], apc_param$mumax[row_index])
}
b116_6_6_strain_pred <- filter(strain_pred, isolate ==  c("S12-0116")) %>%
filter(temp == "6")
b132_6_6_strain_pred <- filter(strain_pred, isolate ==  c("S12-0132")) %>%
filter(temp == "6")
b141_6_6_strain_pred <- filter(strain_pred, isolate ==  c("S12-0141")) %>%
filter(temp == "6")
b166_6_6_strain_pred <- filter(strain_pred, isolate ==  c("S12-0166")) %>%
filter(temp == "6")
b180_6_6_strain_pred <- filter(strain_pred, isolate ==  c("S12-0180")) %>%
filter(temp == "6")
b184_6_6_strain_pred <- filter(strain_pred, isolate ==  c("S12-0184")) %>%
filter(temp == "6")
b116_10_strain_pred <- filter(strain_pred, isolate ==  c("S12-0116")) %>%
filter(temp == "10")
b132_10_strain_pred <- filter(strain_pred, isolate ==  c("S12-0132")) %>%
filter(temp == "10")
b141_10_strain_pred <- filter(strain_pred, isolate ==  c("S12-0141")) %>%
filter(temp == "10")
b166_10_strain_pred <- filter(strain_pred, isolate ==  c("S12-0166")) %>%
filter(temp == "10")
b180_10_strain_pred <- filter(strain_pred, isolate ==  c("S12-0180")) %>%
filter(temp == "10")
b184_10_strain_pred <- filter(strain_pred, isolate ==  c("S12-0184")) %>%
filter(temp == "10")
l1_pred <- apc_pred %>%
filter(lot == 1)
l2_pred <- apc_pred %>%
filter(lot == 2)
l3_pred <- apc_pred %>%
filter(lot == 3)
l4_pred <- apc_pred %>%
filter(lot == 4)
l5_pred <- apc_pred %>%
filter(lot == 5)
l6_pred <- apc_pred %>%
filter(lot == 6)
l7_pred <- apc_pred %>%
filter(lot == 7)
l8_pred <- apc_pred %>%
filter(lot == 8)
## ----------------------Plotting-----------------------------------------------
#Plot data; Save plots in R Project folder
date <- Sys.Date()
date <- gsub("-", "_", date)
strain_p1_6 <- ggplot(data = b116_6_6, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = biorep)) +
geom_line(data = b116_6_6_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "S12-0116") +
scale_shape_manual(values = c(0, 1, 2)) +
labs(shape = "Biological replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p2_6 <- ggplot(data = b132_6_6, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = biorep))  +
geom_line(data = b132_6_6_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "S12-0132") +
scale_shape_manual(values = c(0, 1, 2)) +
labs(shape = "Biological replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p3_6 <- ggplot(data = b141_6_6, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = biorep))  +
geom_line(data = b141_6_6_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) +
labs(title = "S12-0141") +
scale_shape_manual(values = c(0, 1, 2)) +
labs(shape = "Biological replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p4_6 <- ggplot(data = b166_6_6, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = biorep)) +
geom_line(data = b166_6_6_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "FSL S12-0166") +
scale_shape_manual(values = c(0, 1, 2)) +
labs(shape = "Biological replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p5_6 <- ggplot(data = b180_6_6, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = biorep)) +
geom_line(data = b180_6_6_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "FSL S12-0180") +
scale_shape_manual(values = c(0, 1, 2)) +
labs(shape = "Biological replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p6_6 <- ggplot(data = b184_6_6, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = biorep)) +
geom_line(data = b184_6_6_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "FSL S12-0184") +
scale_shape_manual(values = c(0, 1, 2)) + labs(shape = "Replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p1_10 <- ggplot(data = b116_10, aes(x = day, y = log_average_wrangled_conc), shape = biorep) +
geom_point(shape = 0)  +
geom_line(data = b116_10_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "FSL S12-0116") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p2_10 <-ggplot(data = b132_10, aes(x = day, y = log_average_wrangled_conc), shape = biorep) +
geom_point(shape = 0)  + geom_line(data = b132_10_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "FSL S12-0132") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p3_10 <-ggplot(data = b141_10, aes(x = day, y = log_average_wrangled_conc), shape = biorep) +
geom_point(shape = 0) +
geom_line(data = b141_10_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "FSL S12-0141")  +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p4_10 <-ggplot(data = b166_10, aes(x = day, y = log_average_wrangled_conc), shape = biorep) +
geom_point(shape = 0) +
geom_line(data = b166_10_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "FSL S12-0166")  +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p5_10 <-ggplot(data = b180_10, aes(x = day, y = log_average_wrangled_conc), shape = biorep) +
geom_point(shape = 0) +
geom_line(data = b180_10_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "FSL S12-0180")  +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_p6_10 <-ggplot(data = b184_10, aes(x = day, y = log_average_wrangled_conc), shape = biorep) +
geom_point(shape = 0) +
geom_line(data = b184_10_strain_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = "FSL S12-0184")  +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
strain_plots_6c <- ggarrange(strain_p1_6 + rremove("ylab") + rremove("xlab"),
strain_p2_6 + rremove("ylab") + rremove("xlab"),
strain_p3_6 + rremove("ylab") + rremove("xlab"),
strain_p4_6 + rremove("ylab") + rremove("xlab"),
strain_p5_6 + rremove("ylab") + rremove("xlab"),
strain_p6_6 + rremove("ylab") + rremove("xlab"), ncol = 3, nrow = 2, common.legend = TRUE, legend = "right")
pdf(paste("outputs/plots/6C_strain_primary_model_plot_", date, ".pdf", sep = ""))
annotate_figure(strain_plots_6c, left = textGrob(expression("Concentration, log"[10]*"CFU/g"), rot = 90, vjust = 1, gp = gpar(cex = 1)),
bottom = textGrob("Day", gp = gpar(cex = 1)))
dev.off()
strain_plots_10c <- ggarrange(strain_p1_10 + rremove("ylab") + rremove("xlab"),
strain_p2_10 + rremove("ylab") + rremove("xlab"),
strain_p3_10 + rremove("ylab") + rremove("xlab"),
strain_p4_10 + rremove("ylab") + rremove("xlab"),
strain_p5_10 + rremove("ylab") + rremove("xlab"),
strain_p6_10 + rremove("ylab") + rremove("xlab"), ncol = 3, nrow = 2)
pdf(paste("outputs/plots/10_strain_primary_model_plot_", date, ".pdf", sep = ""))
annotate_figure(strain_plots_10c, left = textGrob(expression("Concentration, log"[10]*"CFU/g"), rot = 90, vjust = 1, gp = gpar(cex = 1)),
bottom = textGrob("Day", gp = gpar(cex = 1)))
dev.off()
apc_p1_6 <- ggplot(data = l1, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l1_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 1, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p2_6 <- ggplot(data = l2, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l2_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 2, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p3_6 <- ggplot(data = l3, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l3_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 3, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p4_6 <- ggplot(data = l4, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l4_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 4, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p5_6 <- ggplot(data = l5, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l5_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 5, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p6_6 <- ggplot(data = l6, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l6_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 6, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p7_10 <- ggplot(data = l7, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l7_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 7, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_p8_10 <- ggplot(data = l8, aes(x = day, y = log_average_wrangled_conc)) +
geom_point(aes(shape = isolate)) +
geom_line(data = l8_pred, aes(x = day, y = predicted_concentration)) +
xlab("Day") + ylab(expression("Log"[10]*"CFU/g")) + labs(title = expression("Lot 8, 6"*~degree*"C")) +
scale_shape_manual(values = c(0, 1, 2), labels = c(1, 2, 3)) +
labs(shape = "Technical replicate") +
theme_bw() +
theme(plot.title = element_text(vjust = -1.5))
apc_plots <- ggarrange(apc_p1_6 + rremove("ylab") + rremove("xlab"),
apc_p2_6 + rremove("ylab") + rremove("xlab"),
apc_p3_6 + rremove("ylab") + rremove("xlab"),
apc_p4_6 + rremove("ylab") + rremove("xlab"),
apc_p5_6 + rremove("ylab") + rremove("xlab"),
apc_p6_6 + rremove("ylab") + rremove("xlab"),
apc_p7_10 + rremove("ylab") + rremove("xlab"),
apc_p8_10 + rremove("ylab") + rremove("xlab"), ncol = 4, nrow = 2, common.legend = TRUE, legend = "right")
pdf(paste("outputs/plots/apc_primary_model_plot_", date, ".pdf", sep = ""))
annotate_figure(apc_plots, left = textGrob(expression("Concentration, log"[10]*"CFU/g"), rot = 90, vjust = 1, gp = gpar(cex = 1)),
bottom = textGrob("Day", gp = gpar(cex = 1)))
dev.off()
## -------------------------------------------------------------------------
# Merging data into a single dataframe; Formatting variables;
combined_data <- dplyr::bind_rows(b2, b3, b4, b5, b6, b7, b8, b9) #All dataframes need have the same column names to use this function. NAs are added when column names do not between dataframes
#Check whether any NAs were introduced during merging
cbind(
lapply(
lapply(combined_data, is.na)
, sum))
## -------------------------------------------------------------------------
#   Reading in raw data
b2 <- read.csv("data/raw/batch2_consolidated_data_2022_1_8.csv", header = TRUE, stringsAsFactors = TRUE)
b3 <- read.csv("data/raw/batch3_consolidated_data_2022_1_8.csv", header = TRUE, stringsAsFactors = TRUE)
b4 <- read.csv("data/raw/batch4_consolidated_data_2022_1_8.csv", header = TRUE, stringsAsFactors = TRUE)
b5 <- read.csv("data/raw/batch5_consolidated_data_2022_1_8.csv", header = TRUE, stringsAsFactors = TRUE)
b6 <- read.csv("data/raw/batch6_consolidated_data_2022_1_8.csv", header = TRUE, stringsAsFactors = TRUE)
b7 <- read.csv("data/raw/batch7_consolidated_data_2022_1_8.csv", header = TRUE, stringsAsFactors = TRUE)
b8 <- read.csv("data/raw/batch8_consolidated_data_2022_05_17.csv", header = TRUE, stringsAsFactors = TRUE)
b9 <- read.csv("data/raw/batch9_consolidated_data_2022_05_17.csv", header = TRUE, stringsAsFactors = TRUE)
## -------------------------------------------------------------------------
# Merging data into a single dataframe; Formatting variables;
combined_data <- dplyr::bind_rows(b2, b3, b4, b5, b6, b7, b8, b9) #All dataframes need have the same column names to use this function. NAs are added when column names do not between dataframes
#Check whether any NAs were introduced during merging
cbind(
lapply(
lapply(combined_data, is.na)
, sum))
#Select variables necessary for analysis
combined_data <- combined_data %>%
select(c(Plate.Id, Counted.Colonies, Concentration, Dilution.Factor))
#Making the column names snake case
colnames(combined_data) <- gsub("[.]", "_", colnames(combined_data)) %>%
tolower()
#Separating the Plate.Id column, to provide more resolution between each observation. Plate.Id is the name entered for each observation in SphereFlash. It can be broken down into descriptive variables (e.g., day, media etc)
combined_data <- combined_data %>%
separate(plate_id, into = c("batch", "temperature", "day", "isolate", "biorep", "media", "dilution", "time", "platingrep"), sep = "_", remove = FALSE)
#Check whether any NAs were introduced during separating Plate.ID
cbind(
lapply(
lapply(combined_data, is.na)
, sum))
#Convert combined_data$Batch into a factor variable
combined_data$batch <- as.factor(combined_data$batch)
#Convert combined_data$Day, combined_data$BioRep, combined_data$Dilution, combined_data$PlatingRep, combined_data$Concentration into a factor variable
combined_data$day <- as.numeric(combined_data$day)
combined_data$biorep <- as.numeric(combined_data$biorep)
combined_data$dilution <- as.numeric(combined_data$dilution)
combined_data$platingrep <- as.numeric(combined_data$platingrep)
combined_data$concentration <- as.numeric(combined_data$concentration)
#Renaming the concentration vector, to indicate that this concentration was calculated by SphereFlash.
colnames(combined_data)[12] <- "concentration_from_sphereflash"
#Separate the negative controls and the spinach controls, as a separate data set
control_data <- combined_data %>%
filter(isolate == "NC" | isolate == "Control")
#Check whether any NAs were introduced during filtering out negative control and spinach control data
cbind(
lapply(
lapply(control_data, is.na)
, sum))
#Separate the APC and strain growth data
apc_strain_data <- combined_data %>%
filter(isolate != "NC" & isolate != "Control")
#Check whether any NAs were introduced during filtering out APC and strain growth data
cbind(
lapply(
lapply(apc_strain_data, is.na)
, sum))
apc_strain_data[, c("batch", "temperature", "isolate", "biorep", "media", "time")] <-
lapply(apc_strain_data[, c("batch", "temperature", "isolate", "biorep", "media", "time")] , as.factor)
#Calculating the average concentration for each day of testing and media. Removing columns that would not be required during subsequent portions of the analysis
apc_strain_data_wrangled_ave <- apc_strain_data %>%
group_by(batch, isolate, day, time, media) %>%
mutate(average_wrangled_conc = mean(concentration_from_sphereflash)) %>%
distinct(batch, isolate, day, time, media, .keep_all = TRUE) %>%
mutate(log_average_wrangled_conc= log10(average_wrangled_conc)) %>%
ungroup()
#Identifying which observations are in below the detection limit
below_det_limit <- apc_strain_data_wrangled_ave[apc_strain_data_wrangled_ave$average_wrangled_conc == 0, ]
apc_strain_data[, c("batch", "temperature", "isolate", "biorep", "media", "time")] <-
lapply(apc_strain_data[, c("batch", "temperature", "isolate", "biorep", "media", "time")] , as.factor)
#Calculating the average concentration for each day of testing and media. Removing columns that would not be required during subsequent portions of the analysis
apc_strain_data_wrangled_ave <- apc_strain_data %>%
group_by(batch, isolate, day, time, media) %>%
mutate(average_wrangled_conc = mean(concentration_from_sphereflash)) %>%
distinct(batch, isolate, day, time, media, .keep_all = TRUE) %>%
mutate(log_average_wrangled_conc= log10(average_wrangled_conc)) %>%
ungroup()
#Identifying which observations are in below the detection limit
below_det_limit <- apc_strain_data_wrangled_ave[apc_strain_data_wrangled_ave$average_wrangled_conc == 0, ]
#Replacing the concentration of samples that were below the detection limit with
#25% of the detection limit (detection limit = dilution factor*volume plated (50uL))
apc_strain_data_wrangled_ave$log_average_wrangled_conc <-
ifelse(apc_strain_data_wrangled_ave$average_wrangled_conc == 0,
log10(0.25*apc_strain_data_wrangled_ave$dilution_factor/0.05),
apc_strain_data_wrangled_ave$log_average_wrangled_conc)
below_det_limit
#Replacing the concentration of samples that were below the detection limit with
#25% of the detection limit (detection limit = dilution factor*volume plated (50uL))
apc_strain_data_wrangled_ave$log_average_wrangled_conc <-
ifelse(apc_strain_data_wrangled_ave$average_wrangled_conc == 0,
log10(0.25*apc_strain_data_wrangled_ave$dilution_factor/0.05),
apc_strain_data_wrangled_ave$log_average_wrangled_conc)
#Removing unecessary columns from the apc_strain_data dataframe
apc_strain_data_wrangled_ave <- apc_strain_data_wrangled_ave %>%
select(-c("concentration_from_sphereflash", "counted_colonies", "dilution", "dilution_factor", "platingrep"))
#Identify which day the max count is reached for each isolate. Counts will be marked as death_phase or not, based on this data
max_by_isolate_and_rep <- apc_strain_data_wrangled_ave %>%
group_by(batch, isolate, media, time) %>%
arrange(desc(log_average_wrangled_conc)) %>%
slice(1)
## -----------------------------Reading in Data---------------------------------
apc_strain_data <- read.csv("data/wrangled/apc_strain_averaged_wrangled_01_openrefine_deathphase.csv", header = TRUE)
## -----------------------------Wrangling---------------------------------------
#Subtracting strain-specific counts from the BHI counts
#Using data from 36h timepoint for S12-0166, S12-0180 and S12-0184
#Using data from 24h for S12-0116, S12-0132, S12-0144
apc_strain_data_2 <- apc_strain_data %>%
filter((isolate %in% c("S12-0166", "S12-0180", "S12-0184") & time == "36") |
(isolate %in% c("S12-0116", "S12-0132", "S12-0141")))
